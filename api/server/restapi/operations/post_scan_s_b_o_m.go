// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostScanSBOMHandlerFunc turns a function with the right signature into a post scan s b o m handler
type PostScanSBOMHandlerFunc func(PostScanSBOMParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostScanSBOMHandlerFunc) Handle(params PostScanSBOMParams) middleware.Responder {
	return fn(params)
}

// PostScanSBOMHandler interface for that can handle valid post scan s b o m params
type PostScanSBOMHandler interface {
	Handle(PostScanSBOMParams) middleware.Responder
}

// NewPostScanSBOM creates a new http.Handler for the post scan s b o m operation
func NewPostScanSBOM(ctx *middleware.Context, handler PostScanSBOMHandler) *PostScanSBOM {
	return &PostScanSBOM{Context: ctx, Handler: handler}
}

/* PostScanSBOM swagger:route POST /scanSBOM postScanSBOM

Scan SBOM (Software Bill Of Materials) for vulnerabilities

*/
type PostScanSBOM struct {
	Context *middleware.Context
	Handler PostScanSBOMHandler
}

func (o *PostScanSBOM) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostScanSBOMParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
